// datasource для PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// генерация клиента Prisma
generator client {
  provider = "prisma-client-js"
}

/// Перечисление стадий выполнения задачи
enum TaskStage {
  TODO
  IN_PROGRESS
  DONE
}

/// Модель пользователя
model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  name          String?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Пользователь может состоять в нескольких спейсах
  spaces        Space[]   @relation("UserSpaces")
  // Задачи, где пользователь является исполнителем
  assignedTasks Task[]    @relation("AssignedTasks")
  // Токены (например, refresh-токены)
  tokens        Token[]
}

/// Модель спейса (пространства, объединяющего доски)
model Space {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Пользователи, имеющие доступ к спейсу
  users       User[]    @relation("UserSpaces")
  // Доски, принадлежащие спейсу
  boards      Board[]
  // Задачи, привязанные к спейсу
  tasks       Task[]
}

/// Модель доски Kanban в рамках спейса
model Board {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Каждый спейс может иметь несколько досок
  spaceId     Int
  space       Space     @relation(fields: [spaceId], references: [id])
  // Задачи, привязанные к доске
  tasks       Task[]
}

/// Модель задачи Kanban
model Task {
  id           Int       @id @default(autoincrement())
  title        String
  description  String?
  stage        TaskStage @default(TODO)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  boardId      Int
  board        Board     @relation(fields: [boardId], references: [id])
  
  spaceId      Int
  space        Space     @relation(fields: [spaceId], references: [id])
  
  assignedToId Int?
  assignedTo   User?     @relation("AssignedTasks", fields: [assignedToId], references: [id])
}


/// Модель для хранения refresh-токенов
model Token {
  id        Int      @id @default(autoincrement())
  token     String   
  type      String   // например, "refresh"
  createdAt DateTime @default(now())
  expiresAt DateTime

  // Ссылка на пользователя
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}
