// datasource указывает на использование PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// генерация клиента Prisma
generator client {
  provider = "prisma-client-js"
}

/// Перечисление стадий выполнения задачи
enum TaskStage {
  TODO         // задача поставлена в очередь
  IN_PROGRESS  // задача в работе
  DONE         // задача выполнена
}

/// Модель пользователя
model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  password    String
  name        String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  spaces      Space[]   @relation("UserSpaces")
  tasks       Task[]    @relation("UserTasks")
  tokens      Token[]
}

/// Модель спейса (пространства, объединяющего доски)
model Space {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Множество пользователей, имеющих доступ к данному пространству
  users       User[]    @relation("UserSpaces")
  // Доски, принадлежащие спейсу
  boards      Board[]
}

/// Модель доски Kanban в рамках спейса
model Board {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Каждый спейс может иметь несколько досок
  spaceId     Int
  space       Space     @relation(fields: [spaceId], references: [id])
  // Задачи, привязанные к доске
  tasks       Task[]
}

/// Модель задачи Kanban
model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  stage       TaskStage @default(TODO)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Задача обязательно принадлежит доске
  boardId     Int
  board       Board     @relation(fields: [boardId], references: [id])
  // Опционально, задача может быть назначена пользователю
  userId      Int?
  user        User?     @relation("UserTasks", fields: [userId], references: [id])
}

/// Модель для хранения refresh-токенов (или иной информации, связанной с JWT)
model Token {
  id        Int      @id @default(autoincrement())
  token     String   // сам токен (либо его хеш, если требуется безопасность)
  type      String   // например, "refresh"
  createdAt DateTime @default(now())
  expiresAt DateTime

  // Ссылка на пользователя, которому принадлежит токен
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}
